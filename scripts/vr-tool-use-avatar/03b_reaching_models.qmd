---
title: "Avatar VR - Bayesian Models - Reaching Task"
author: "Joshua Bell"
format:
  html:
    toc: true
    toc-depth: 3
    toc-float: true
    toc-placement: left
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE, 
                      message = FALSE, 
                      cache = TRUE, 
                      fig.width = 12, 
                      fig.height = 8)
pkgs <- c("dplyr", "readr", "magrittr", "data.table", "here", "brms", "cmdstanr", "datawizard", "bayestestR", "flextable", "officer", "ggplot2", "tidybayes")
for(i in pkgs){
  if(!i %in% rownames(installed.packages())){ 
    install.packages(i) 
    library(i, character.only = TRUE)

  if(i == "cmdstanr")
  {
    install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
    library(cmdstanr)
    cmdstanr::install_cmdstan()
  }
  }
  else(library(i, character.only = TRUE))
}

options("mc.cores" = parallel::detectCores(), "brms.backend" = "cmdstan", "brms.file_refit" = "on_change")

b = 16000/parallel::detectCores()
i = 48000/parallel::detectCores()
ch = parallel::detectCores()
co = parallel::detectCores()
control_list = list(adapt_delta = .99, max_treedepth = 15)
```


```{r import-standardize, include=FALSE}

ppt_m <- read_csv(
  here::here("data", "study_three", "ppt_manual.csv")
) %>%
  as.data.table() %>%
  mutate(time = factor(
    x = time,
    levels = c("pre", "post"), labels = c("Pre", "Post")
  ))


ppt_peaks <- ppt_m %>% 
  mutate(vel_m_filt_std = standardize(vel_m_filt),
         dec_m_filtfilt_std = standardize(dec_m_filtfilt)) %>%
  as.data.table()

ppt_acceleration_and_latencies <- ppt_m[,
    acc_m_filtfilt_std := standardize(acc_m_filtfilt)
  ]

```



# Models
## Peaks
### Velocity
#### Prior
```{r velocity-peak-prior}
velocity_peak_priors <- brm(
  vel_m_filt_std ~ 1 + time + (1 + time | ppid), 
  data = ppt_peaks, 
  family = gaussian,
  prior = c(
    set_prior(prior = "normal(-.2, 2)", class = "b", coef = "timePost"),
    set_prior(prior = "normal(0, 2)", class = "Intercept"),
    set_prior(prior = "exponential(1)", class = "sd"), 
    set_prior(prior = "exponential(1)", class = "sigma"),
    set_prior(prior = "lkj(1)", class = "cor", group = "ppid")
  ),
  sample_prior = "only",
  seed = 1337,
  silent = TRUE, refresh = 0,
  save_pars = save_pars(all = TRUE),
  warmup = b, iter = i, chains = ch, cores = co,
  control = control_list
  )

plot(velocity_peak_priors)
summary(velocity_peak_priors)
```

#### Posterior

```{r velocity-peak-posterior}
velocity_peaks <- update(
  velocity_peak_priors,
  sample_prior = "no",
  refresh = 0,
  seed = 1337,
  file = here::here("scripts", "for_osf", "tooluse_avatar", "models", "peakvelocity_ppt")
  )

plot(velocity_peaks)
summary(velocity_peaks)

pp_check(velocity_peaks, ndraws = 50) +
  theme_tidybayes() +
  theme(
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Peak Velocity",
    subtitle = "Posterior Draws vs. Empirical Distribution",
    x = "Velocity (mm/s)"
  )

velbf <- bayesfactor_pointnull(
  velocity_peaks,
  direction = "<",
  prior = velocity_peak_priors
  ) %>% as.data.table()

vel_describe <- bayestestR::describe_posterior(
  velocity_peaks,
  centrality = "map",
  ci_method="hdi"
  ) %>% 
  dplyr::filter(Parameter == "b_timePost") %>% 
  mutate("Outcome" = "Peak Velocity")

(
  vel_describe <- bind_cols(
    vel_describe,
    "BF" = exp(
        velbf[Parameter == "b_timePost",
        log_BF]
        )
        )
)
```

### Acceleration
#### Prior
```{r acceleration-peak-prior}
acceleration_peak_priors <- brm(
  acc_m_filtfilt_std ~ 1 + time + (1 + time | ppid), 
  data = ppt_acceleration_and_latencies, 
  family = gaussian,
  prior = c(
    set_prior(prior = "normal(-.2, 2)", class = "b", coef = "timePost"),
    set_prior(prior = "normal(0, 2)", class = "Intercept"),
    set_prior(prior = "exponential(1)", class = "sd"), 
    set_prior(prior = "exponential(1)", class = "sigma"),
    set_prior(prior = "lkj(1)", class = "cor", group = "ppid")
    ),
  sample_prior = "only",
  seed = 1337,
  silent = TRUE, refresh = 0,
  save_pars = save_pars(all = TRUE),
  warmup = b, iter = i, chains = ch, cores = co,
  control = control_list
  )

plot(acceleration_peak_priors)
summary(acceleration_peak_priors)
```

#### Posterior

```{r acceleration-peak-posterior}
acceleration_peaks <- update(
  acceleration_peak_priors,
  sample_prior = "no",
  refresh = 0,
  seed = 1337,
  file = here::here("scripts", "for_osf", "tooluse_avatar", "models", "peakacceleration_ppt")
  )

plot(acceleration_peaks)
summary(acceleration_peaks)

pp_check(acceleration_peaks, ndraws = 50) +
  theme_tidybayes() +
  theme(
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Acceleration Peak",
    subtitle = "Posterior Draws vs. Empirical Distribution",
    x = "Acceleration (mm/s^2)"
  )

accbf <- bayesfactor_pointnull(
  acceleration_peaks,
  direction = "<",
  prior = acceleration_peak_priors
  ) %>% as.data.table()

acc_describe <- bayestestR::describe_posterior(
  acceleration_peaks,
  centrality = "map",
  ci_method="hdi"
  ) %>% dplyr::filter(
    Parameter == "b_timePost"
  ) %>% 
  mutate("Outcome" = "Peak Acceleration")

(
  acc_describe <- bind_cols(
    acc_describe,
    "BF" = exp(
        accbf[Parameter == "b_timePost",
        log_BF]
        )
    )
  )

```

### Deceleration
#### Prior
```{r deceleration-peak-prior}
deceleration_peak_priors <- brm(
  dec_m_filtfilt_std ~ 1 + time + (1 + time | ppid), 
  data = ppt_peaks, 
  family = gaussian,
  prior = c(
    set_prior(prior = "normal(.2, 2)", class = "b", coef = "timePost"),
    set_prior(prior = "normal(0, 2)", class = "Intercept"),
    set_prior(prior = "exponential(1)", class = "sd"), 
    set_prior(prior = "exponential(1)", class = "sigma"),
    set_prior(prior = "lkj(1)", class = "cor", group = "ppid")
            ),
  sample_prior = "only",
  seed = 1337,
  silent = TRUE, refresh = 0,
  save_pars = save_pars(all = TRUE),
  warmup = b, iter = i, chains = ch, cores = co,
  control = control_list
  )

plot(deceleration_peak_priors)
summary(deceleration_peak_priors)
```

#### Posterior
```{r deceleration-peak-posterior}

deceleration_peaks <- update(
  deceleration_peak_priors,
  sample_prior = "no",
  seed = 1337,
  refresh = 0,
  file = here::here("scripts", "for_osf", "tooluse_avatar", "models", "peakdeceleration_ppt")
  )

plot(deceleration_peaks)
summary(deceleration_peaks)

pp_check(deceleration_peaks, ndraws = 50) +
  theme_tidybayes() +
  theme(
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Deceleration Peak",
    subtitle = "Posterior Draws vs. Empirical Distribution",
    x = "Deceleration (mm/s^2)"
  )

dec_describe <- bayestestR::describe_posterior(
  deceleration_peaks,
  centrality = "map",
  ci_method="hdi"
  ) %>% dplyr::filter(
    Parameter == "b_timePost"
  ) %>% 
  mutate("Outcome" = "Peak Deceleration")

decbf <- bayesfactor_pointnull(
  deceleration_peaks,
  direction = ">",
  prior = deceleration_peak_priors
  ) %>% as.data.table()

(
  dec_describe <- bind_cols(
    dec_describe,
    "BF" = exp(
        decbf[Parameter == "b_timePost",
        log_BF]
    )
    )
    )

```

## Peak Latencies
### Preregistration changes
Changes from preregistration:  
- Lognormal distribution over gaussian due to better posterior predictive fit  
- Unstandardized due to lognormal, and negative posterior predictions from standardization  
- Intercepts centered at empirical mean, with an SD equal to empirical SD * 2.5  
- Time effect centered at empirical SD / 5, with spread of empirical SD * 2.5  
- These changes do not change the interpretable results of the models, but do improve the fit of the models  

### Velocity

#### Prior

```{r velocity-latency-prior}

velocity_latency_priors <- brm(
  vel_lat_filt ~ 1 + time + (1 + time | ppid), 
  data = ppt_acceleration_and_latencies, 
  family = lognormal,
  prior = c(
     prior_string(
       prior = paste0("normal(",
         round(log(
          ppt_acceleration_and_latencies[,sd(vel_lat_filt)] / 5
         ), 2), ",",
         round(log(
          ppt_acceleration_and_latencies[,sd(vel_lat_filt)] * 2.5
         ), 2), ")"
       ),
       class = "b"),
    # Use rstanarm approach to set Intercept prior
    # Use normal with mean of response, and sd of response * 2.5
    prior_string(
      prior = paste0("normal(",
         round(log(
          ppt_acceleration_and_latencies[,mean(vel_lat_filt)]
         ), 2), ",",
         round(log(
          ppt_acceleration_and_latencies[,sd(vel_lat_filt)] * 2.5
         ), 2), ")"
       ),
      class = "Intercept"),
    prior(prior = "exponential(1)", class = "sd"),
    prior(prior = "exponential(1)", class = "sigma"),
    prior(prior = "lkj(1)", class = "cor", group = "ppid")
            ),
  sample_prior = "only",
  seed = 1337,
  silent = 2, refresh = 0,
  save_pars = save_pars(all = TRUE),
  warmup = b, iter = i, chains = ch, cores = co,
  control = control_list
  )

plot(velocity_latency_priors)
summary(velocity_latency_priors)
```

#### Posterior
```{r velocity-latency-posterior}

velocity_latencies <- update(
  velocity_latency_priors,
  sample_prior = "no",
  refresh = 0,
  seed = 1337,
  file = here::here("scripts", "for_osf", "tooluse_avatar", "models", "velocity_latency_ppt")
  )

plot(velocity_latencies)
summary(velocity_latencies)

pp_check(velocity_latencies, ndraws = 50) +
  theme_tidybayes() +
  theme(
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Velocity Latency",
    subtitle = "Posterior Draws vs. Empirical Distribution",
    x = "Time (ms)"
  )

velocity_latencies_describe <- bayestestR::describe_posterior(
  velocity_latencies,
  centrality = "map",
  ci_method="hdi"
  ) %>% 
  dplyr::filter(
  Parameter == "b_timePost"
  ) %>% 
  mutate("Outcome" = "Velocity Latency")

vellatbf <- bayesfactor_pointnull(
  velocity_latencies,
  direction = ">",
  prior = velocity_latency_priors
  ) %>% as.data.table()

vel_lat_describe <- bind_cols(
    velocity_latencies_describe,
    "BF" = exp(
        vellatbf[Parameter == "b_timePost",
        log_BF]
        )
    )
```

### Acceleration
#### Prior
```{r acceleration-latency-prior}

# Acceleration Latency -------------

acceleration_latency_priors <- brm(
  acc_lat_filtfilt ~ 1 + time + (1 + time | ppid), 
  data = ppt_acceleration_and_latencies, 
  family = lognormal(link = "identity"),
  prior = c(
     prior_string(
       prior = paste0("normal(",
         round(log(
          ppt_acceleration_and_latencies[,sd(acc_lat_filtfilt)] / 5
         ), 2), ",",
         round(log(
          ppt_acceleration_and_latencies[,sd(acc_lat_filtfilt)] * 2.5
         ), 2), ")"
       ),
       class = "b"),
    # Use rstanarm approach to set Intercept prior
    # Use normal with mean of response, and sd of response * 2.5
    prior_string(
      prior = paste0("normal(",
         round(log(
          ppt_acceleration_and_latencies[,mean(acc_lat_filtfilt)]
         ), 2), ",",
         round(log(
          ppt_acceleration_and_latencies[,sd(acc_lat_filtfilt)] * 2.5
         ), 2), ")"
       ),
      class = "Intercept"),
    prior(prior = "exponential(1)", class = "sd"),
    prior(prior = "exponential(1)", class = "sigma"),
    prior(prior = "lkj(1)", class = "cor", group = "ppid")
            ),
  sample_prior = "only",
  seed = 1337,
  silent = 2, refresh = 0,
  save_pars = save_pars(all = TRUE),
  warmup = b, iter = i, chains = ch, cores = co,
  control = control_list
  )

plot(acceleration_latency_priors) 

```

#### Posterior
```{r acceleration-latency-posterior}

acceleration_latencies <- update(
  acceleration_latency_priors,
  sample_prior = "no",
  refresh = 0,
  file = here::here("scripts", "for_osf", "tooluse_avatar", "models", "acceleration_latency_ppt")
  )

plot(acceleration_latencies)
summary(acceleration_latencies)

pp_check(acceleration_latencies, ndraws = 50) +
  theme_tidybayes() +
  theme(
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Acceleration Latency",
    subtitle = "Posterior Draws vs. Empirical Distribution",
    x = "Time (ms)"
  )

acc_lat_describe <- bayestestR::describe_posterior(
  acceleration_latencies, centrality = "map",
  ci_method="hdi"
  ) %>% 
  dplyr::filter(
    Parameter == "b_timePost"
  ) %>% 
  mutate("Outcome" = "Acceleration Latency")

acclatbf <- bayesfactor_pointnull(
  acceleration_latencies,
  direction = ">",
  prior = acceleration_latency_priors
  ) %>% as.data.table()

(
  acc_lat_describe <- bind_cols(
    acc_lat_describe,
    "BF" = exp(
        acclatbf[
          Parameter == "b_timePost",
          log_BF
          ]
        )
    )
    )
```

### Deceleration
#### Prior
```{r deceleration-latency-prior}

deceleration_latency_priors <- brm(dec_lat_filtfilt ~ 1 + time + (1 + time | ppid), 
  data = ppt_acceleration_and_latencies, 
  family = lognormal(link = "identity"),
  prior = c(
     prior_string(
       prior = paste0("normal(",
         round(log(
          ppt_acceleration_and_latencies[,sd(dec_lat_filtfilt)] / 5
         ), 2), ",",
         round(log(
          ppt_acceleration_and_latencies[,sd(dec_lat_filtfilt)] * 2.5
         ), 2), ")"
       ),
       class = "b"),
    # Use rstanarm approach to set Intercept prior
    # Use normal with mean of response, and sd of response * 2.5
    prior_string(
      prior = paste0("normal(",
         round(log(
          ppt_acceleration_and_latencies[,mean(dec_lat_filtfilt)]
         ), 2), ",",
         round(log(
          ppt_acceleration_and_latencies[,sd(dec_lat_filtfilt)] * 2.5
         ), 2), ")"
       ),
      class = "Intercept"),
    prior(prior = "exponential(1)", class = "sd"),
    prior(prior = "exponential(1)", class = "sigma"),
    prior(prior = "lkj(1)", class = "cor", group = "ppid")
            ),
  sample_prior = "only",
  seed = 1337,
  silent = 2, refresh = 0,
  save_pars = save_pars(all = TRUE),
  warmup = b, iter = i, chains = ch, cores = co,
  control = control_list
  )

plot(deceleration_latency_priors)
summary(deceleration_latency_priors)
```

#### Posterior

```{r deceleration-latency-posterior}

deceleration_latencies <- update(
  deceleration_latency_priors,
  sample_prior = "no",
  seed = 1337,
  refresh = 0,
  file = here::here("scripts", "for_osf", "tooluse_avatar", "models", "deceleration_latency_ppt")
  )

plot(deceleration_latencies)
summary(deceleration_latencies)

pp_check(deceleration_latencies, ndraws = 50) +
  theme_tidybayes() +
  theme(
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Deceleration Latency",
    subtitle = "Posterior Draws vs. Empirical Distribution",
    x = "Time (ms)"
  )

deceleration_latencies_describe <- bayestestR::describe_posterior(
  deceleration_latencies,
  centrality = "map",
  ci_method="hdi"
  ) %>% 
  dplyr::filter(
    Parameter == "b_timePost"
    ) %>% 
  mutate("Outcome" = "Deceleration Latency")

declatbf <- bayesfactor_pointnull(
  deceleration_latencies,
  direction = ">",
  prior = deceleration_latency_priors
  ) %>% as.data.table()

(
  dec_lat_describe <- bind_cols(
    deceleration_latencies_describe,
    "BF" = exp(
        declatbf[Parameter == "b_timePost",
        log_BF]
        )
    )
    )
```

# Summary Table

```{r table_one, results='asis'}
#| tbl-cap: Table 1
model_params <- bind_rows(
  vel_describe,
  acc_describe,
  dec_describe,
  vel_lat_describe,
  acc_lat_describe,
  dec_lat_describe
) %>% select(
  Outcome,
  BF,
  MAP,
  CI_low,
  CI_high
) %>% rename("Lower" = CI_low,
             "Upper" = CI_high,
             "Mode" = MAP)

saveRDS(model_params, here::here("scripts", "for_osf", "tooluse_avatar", "tables", "model_params.rds"))
fwrite(model_params, here::here("scripts", "for_osf", "tooluse_avatar", "tables", "model_params.csv"))

model_table <- flextable::qflextable(model_params) %>%
  add_header_row(T, 
                 c(" ", "95% Highest Density Interval"), 
                 colwidths = c(3, 2)) %>% 
  add_header_lines("Table 1. Tool-use Effect in Kinematic Models") %>%
  border_outer(border = officer::fp_border(style = "none", 
                                           width = 0), 
               part = "header") %>%
  hline(i = 1, 
        border = officer::fp_border(style = "solid", 
                                    width = 1.5), 
        part = "header") %>%
  hline(i = 2, j= c(1:3), 
        border = officer::fp_border(style = "none", 
                                    width = 0), 
        part = "header") %>%
  hline(i = 2, j= c(4, 5), 
        border = officer::fp_border(style = "solid", 
                                    width = 1), 
        part = "header") %>%
  hline(i = 3, 
        border = officer::fp_border(style = "solid", 
                                    width = 1), 
        part = "header") %>%
  hline(i = 6, 
        border = officer::fp_border(style = "solid", 
                                    width = 1.5), 
        part = "body") %>%
  style(i = 1:6,j = 2, part = "body", pr_t = fp_text(font.size = 16)) %>%
  align(j = 3:5, align = "center", part = "all") %>%
  autofit(
  add_w = .1,
  add_h = 0.1
  ) %>%
  flextable::footnote(i = 3, j=c(1:2),
           value = as_paragraph(
             c(
               "Parameters given as standardized values, and represent the effect of time (tool-use).", 
               "Bayes Factors represent multiplicative evidence in favor of effect (Savage-Dickey Ratios).")
             ), 
           ref_symbols = c("a", "b"),
           part = "header"
          ) %>%
  font(fontname = "Times New Roman",
       part = "all") %>%
  fontsize(size = 9, part = "footer") %>%
  flextable::colformat_double(i=c(1:6), j = 3:5, digits = 3) %>%
  flextable::colformat_double(i=c(1:6), j = 2, digits = 2)
  

model_table

saveRDS(model_table, here::here("scripts", "for_osf", "tooluse_avatar", "tables", "kinematic_table.rds"))

```

# Session Info

```{r}
sessioninfo::package_info()
```