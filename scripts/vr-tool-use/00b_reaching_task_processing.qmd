---
title: "VR - Processing - Reaching"
author: "Joshua Bell"
format:
  html:
    toc: true
    toc-depth: 3
    toc-float: true
    toc-placement: left
---

# Package and Session Info
```{r setup-and-import}
# PPT Reaching Data -------------------------------------------------------


# Load necessary libraries ------------------------------------------------
pkgs <- c("data.table", "dplyr", "readr", "tidyfast", "stringr", "tidyr", "magrittr", "purrr", "signal", "here", "missForest", "simputation")
for (i in pkgs) {
  if (!i %in% rownames(installed.packages())) {
      install.packages(i)
      library(i, character.only = TRUE)
  } else {
      (library(i, character.only = TRUE))
  }
}

data.table::setDTthreads(percent = 90)

sessionInfo()
```


```{r filter-and-import-raw}

# Set-up: Filter specification and .csv import ----------------------------

# 10hz Butterworth low-pass filter used for analyses
b_10hz <- butter(1, c(.1), type = "low")

# Parse data from UXF
trial_details <- list.files(
  path = here::here("data", "1_tooluseinVR"),
  pattern = "trial_results.csv",
  full.names = TRUE,
  recursive = TRUE
) %>% # %>% as.data.table() %>%
  map_dfr(fread) %>%
      as.data.table()

# Read manually-adjusted start times
latency_fix <- read_csv(here::here("data", "study_one", "latency_fixes.csv"))

# Manual - Wrist & Fingers ------------------------------------------------

# Parse file locations
ppt_m_files <- trial_details %>%
  dplyr::select(
    ppid,
    experiment,
    block_num,
    trial_num_in_block,
    manual_reach_ppt_hand_movement_location_0) %>%
  # Fix mis-coding of participant IDs (I accidentally a number)
  dplyr::mutate(
    ppid = case_when(
      ppid == "d-002" ~ "d1-002",
      ppid %in% c("d-1-001", "d-1-002") ~ "d1-003",
      TRUE ~ ppid
    ),

    # Adjust filepaths to accommodate fix
    manual_reach_ppt_hand_movement_location_0 = ifelse(
      !is.na(manual_reach_ppt_hand_movement_location_0)
      & str_detect(
        manual_reach_ppt_hand_movement_location_0,
        "1_tooluseinVR\\/d-[\\d-][\\d-]\\d+\\/"
        ),

      paste0(
        experiment, "/",
        ppid, "/",
        str_remove(
          manual_reach_ppt_hand_movement_location_0,
          "^1_tooluseinVR\\/d-[\\d-][\\d-]\\d+\\/"
          )
        ),

      manual_reach_ppt_hand_movement_location_0
    )
  ) %>%
  dplyr::filter(
      !is.na(manual_reach_ppt_hand_movement_location_0) &
          manual_reach_ppt_hand_movement_location_0 != ""
  )

# Read in the csv files using the paths from the trial_results files and unnest those
ppt_trials_nested <- ppt_m_files %>%
    dplyr::mutate(
        manual_movement_ppt = map(
            file.path(here::here("data", manual_reach_ppt_hand_movement_location_0)),
            fread
        )
    ) %>%
    unnest(cols = c(manual_reach_ppt_hand_movement_location_0)) %>%
    as.data.table()

# Unnest again, and fix ms values that were recorded with "_"
ppt_trials_unnested <- dt_unnest(ppt_trials_nested[
  ,
  manual_movement_ppt := map(
    manual_movement_ppt,
    ~ dplyr::mutate(.x, time_ms = as.double(gsub("_", "", time_ms)))
  )
], manual_movement_ppt)

```


# Position Filter

```{r buffer-and-filter-position}

# Manually impute a time_ms column that increments in steps of 5.
ppt_prefilter <- ppt_trials_unnested[,
  `:=`(
    time = if_else(block_num < 3, "pre", "post"),
    time_second = signif(time_ms / 1000, 6),
    time_ms = (0:(.N - 1)) * 5
  ),
  by = c(
    "ppid",
    "block_num",
    "trial_num_in_block",
    "tracked"
  )
][time_ms > 25]

# Participant 1 time_second variable recorded incorrectly
ppt_prefilter <- ppt_prefilter[ppid == "d1-001",
  time_second := signif(time_ms / 1000, 6),
  by = c(
    "ppid",
    "block_num",
    "trial_num_in_block",
    "tracked"
  )
]

rm(ppt_trials_unnested)

gc()

leadcols <- c("pos_x_lead", "pos_y_lead", "pos_z_lead", "time_lead")

bytrial <- c(
  "ppid",
  "block_num",
  "trial_num_in_block",
  "time",
  "tracked",
  "phase"
)

buffercols <- colnames(ppt_prefilter)
buffer_samples <- 20

# Create a buffer to reduce the distortion caused by the filtering process
# Mostly relevant for the first few participants,
# others have much more of a buffer built in to the recording.

buffer <- ppt_prefilter[,
  .(
    pos_x = c(
      seq(
        first(pos_x),
        nth(pos_x, buffer_samples - 1),
        length.out = buffer_samples
      ),
      seq(
        nth(pos_x, buffer_samples - 1),
        first(pos_x),
        length.out = buffer_samples
        )
      ),
    pos_y = c(
      seq(
        first(pos_y),
        nth(pos_y, buffer_samples - 1),
        length.out = buffer_samples
        ),
      seq(
        nth(pos_y, buffer_samples - 1),
        first(pos_y),
        length.out = buffer_samples
        )
      ),
    pos_z = c(
      seq(
        first(pos_z),
        nth(pos_z, buffer_samples),
        length.out = buffer_samples
        ),
      seq(
        nth(pos_z, buffer_samples - 1),
        first(pos_z),
        length.out = buffer_samples
        )
      ),
    time_ms = seq(
      25,
      (-5*buffer_samples*2)+25,
      length.out = (buffer_samples*2)
      ),
    phase = "buffer"
  ),
  by = c(
    "ppid",
    "block_num",
    "trial_num_in_block",
    "tracked",
    "time"
  )
]
ppt_prefilter_buffered <- merge.data.table(
  ppt_prefilter,
  buffer,
  all = TRUE
) %>% dplyr::select(!manual_reach_ppt_hand_movement_location_0)

# Fix ordering
ppt_prefilter_buffered <- ppt_prefilter_buffered[
    order(
        ppid,
        block_num,
        trial_num_in_block,
        tracked,
        time_ms
    )
]

# Apply Butterworth filter to position values
ppt_position_filtered <- ppt_prefilter_buffered[!(ppid %like% "pilot"), ] %>%
    dplyr::group_by(
        ppid,
        block_num,
        trial_num_in_block,
        time,
        tracked
    ) %>%
    dplyr::mutate(
        dplyr::across(
          pos_x:pos_z, 
          ~ filtfilt(b_10hz, .x), 
          .names = "{.col}_10hz")
    ) %>%
    as.data.table()

# Pull column names from the position variables
filteredcolnames <- colnames(
    dplyr::select(
        ppt_position_filtered,
        ends_with(
            c("x", "y", "z")
        )
    )
)

cutoffs <- c(
  "raw",
  "10hz"
)

# Filter out buffer and melt the data into long format.
ppt_position_filtered_long <- ppt_position_filtered %>%
    data.table::melt(
        c(
            "ppid",
            "block_num",
            "trial_num_in_block",
            "tracked",
            "time_ms",
            "time_second",
            "time",
            "phase"
        ),
        measure.vars = patterns("^pos_x", "^pos_y", "^pos_z"),
        variable.name = "filter",
        value.name = c("pos_x", "pos_y", "pos_z")
    )

# Establish the different filters as the cutoffs.
levels(ppt_position_filtered_long$filter) <- cutoffs

bytrial_filter <- c(
  "ppid",
  "block_num",
  "trial_num_in_block",
  "time",
  "tracked",
  "filter"
)

```

# Velocity calculation

```{r velocity}

ppt_velocity <- ppt_position_filtered_long[,
  # create lead columns for position and time
  c(
    "pos_x_lead",
    "pos_y_lead",
    "pos_z_lead",
    "time_ms_lead",
    "time_s_lead"
    ) := lapply(
      .SD,
      data.table::shift,
      1,
      type = "lead"
      ),
  .SDcols = c("pos_x", "pos_y", "pos_z", "time_ms", "time_second"),
  by = bytrial_filter
][,

  # create lag columns for position and time
  c(
    "pos_x_lag",
    "pos_y_lag",
    "pos_z_lag",
    "time_ms_lag",
    "time_s_lag"
  ) := lapply(.SD, data.table::shift, 1, type = "lag"),
  .SDcols = c("pos_x", "pos_y", "pos_z", "time_ms", "time_second"),

  by = bytrial_filter
][,

  `:=`(
    xdiff = (pos_x_lead - pos_x_lag),
    ydiff = (pos_y_lead - pos_y_lag),
    zdiff = (pos_z_lead - pos_z_lag),
    time_diff_ms = (time_ms_lead - time_ms_lag),
    time_diff_s = (time_s_lead - time_s_lag)
  ),
  by = bytrial_filter
][,

  # Calculate velocity in mm/s^2
  `:=`(
    velocity = fifelse(
      !is.na(time_diff_s),
      (sqrt(xdiff^2 + ydiff^2 + zdiff^2) / time_diff_s) * 1000,
      (sqrt(xdiff^2 + ydiff^2 + zdiff^2) / (time_diff_ms / 1000)) * 1000
    ),
    displacement = sqrt(pos_x^2 + pos_y^2 + pos_z^2)
  ),
  by = bytrial_filter
][,

  # Create lead column for velocity
  `:=`(
    velocity_lead = data.table::shift(velocity, 1, type = "lead"),
    velocity_lag = data.table::shift(velocity, 1, type = "lag")
  ),
  by = bytrial_filter
][,

  # Compute differences
  vel_diff := (velocity_lead - velocity_lag),
  by = bytrial_filter
][,

  # Calculate acceleration
  accel := fifelse(
    !is.na(time_diff_s),
    vel_diff / (time_diff_s),
    vel_diff / (time_diff_ms / 1000)
  ),
  by = bytrial_filter
][,

  time_ms_perphase := (
    0:(.N - 1)
    ) * 5,
  by = c(
    "ppid",
    "block_num",
    "trial_num_in_block",
    "time",
    "phase",
    "tracked",
    "filter"
  )
]

```

# Kinematic filtering

```{r kinematic-filtering}

ppt_filt <- ppt_velocity[
  order(ppid, block_num, trial_num_in_block, tracked, filter, time_ms)
][!is.na(velocity) & !is.infinite(velocity),

  # Filter velocity w/ 10hz butterworth
  `:=`(velocity_10hz = filtfilt(b_10hz, velocity)),
  by = c(
    "ppid",
    "block_num",
    "trial_num_in_block",
    "tracked",
    "filter"
  )
][,

  # Create lead column for velocity
  `:=`(
    velocity_10hzlead = data.table::shift(velocity_10hz, 1, type = "lead"),
    velocity_10hzlag = data.table::shift(velocity_10hz, 1, type = "lag")
  ),
  by = bytrial_filter
][,

  # Compute differences
  `:=`(vel_10hzdiff = (velocity_10hzlead - velocity_10hzlag)),
  by = bytrial_filter
][,

  # Compute acceleration
  accel_filtvel := fifelse(
    !is.na(time_diff_s),
    vel_10hzdiff / (time_diff_s),
    vel_10hzdiff / (time_diff_ms / 1000)
  ),
  by = bytrial_filter
][
  order(ppid, block_num, trial_num_in_block, tracked, filter, time_ms)
][

  !is.na(accel) &
    !is.na(accel_filtvel) &
    !is.infinite(accel) &
    !is.infinite(accel_filtvel),

  `:=`(
    accelfilt = filtfilt(b_10hz, accel),
    accel_filtvel_filt = filtfilt(b_10hz, accel_filtvel)
  ),
  by = c(
    "ppid",
    "block_num",
    "trial_num_in_block",
    "tracked",
    "filter"
  )
][order(ppid, block_num, trial_num_in_block, tracked, filter, time_ms)]


```

# Movement Onset

```{r movement-onset}

# Write full data for plotting individual trials/visual quality checks.
ppt_filt_ <- ppt_filt[
  phase != "buffer" &
    filter == "10hz" &
    tracked == "wrist" &
    # Remove cases that would break analyses-
    # these are at the ends of the movement when the markers are hopping around.
    !is.infinite(velocity_10hz) &
    !is.infinite(accel) &
    !is.infinite(accel_filtvel),
  .(
    ppid,
    time, block_num,
    trial_num_in_block, phase,
    time_ms, time_ms_perphase,
    velocity, velocity_10hz,
    accel, accelfilt, accel_filtvel,
    accel_filtvel_filt
  )
]

ppt_filt_latfix <- merge(
  ppt_filt_,
  latency_fix,
  by = c(
    "ppid",
    "trial_num_in_block",
    "time"
  ),
  all.x = TRUE
  ) %>%
  dplyr::mutate(
    start_time = fifelse(
      !is.na(start_time),
      start_time,
      0
    ),
    time_ms_fix = time_ms - start_time) %>%
  dplyr::filter(time_ms_fix > 0) %>%
  arrange(
    ppid,
    time,
    trial_num_in_block,
    time_ms
  ) %>%
  as.data.table()


# Set start time as the first sample where velocity changes
# by 50 over the subsequent 5 samples. When a manual start
# time is specified, use that instead.

ppt_filt_latfix[
  ,
  leadvel := lead(velocity_10hz, 5),
  by = c("ppid", "trial_num_in_block", "time")
  ][
  ,
  dif := abs(velocity_10hz - leadvel)
  ][,
  `:=`(
    start_time = fifelse(
      is.na(start_time) | start_time == 0,
      .SD[(!phase %in% c("start", "replace", "return", "returned") |
        (!phase %in% c("replace", "return", "returned") & ppid == "d1-003")) &
        dif > 50]$time_ms_fix[1],
      start_time
    )
    ),
  by = c(
    "ppid",
    "trial_num_in_block",
    "time"
  )
  ][
  ,

  `:=`(
      order = case_when(
          block_num < 3 ~ "pre",
          block_num == 4 ~ "first",
          block_num == 5 ~ "second"
      )
  )
]

# Merge with manually-identified start points

time_correction <- ppt_filt_latfix[,
  time_ms_fix := time_ms - start_time,
  by = c(
    "ppid",
    "trial_num_in_block",
    "time"
  )
] %>%
  arrange(ppid, time, trial_num_in_block, time_ms)

fwrite(time_correction, here::here("data", "study_one", "ppt_m_fulltrials.csv"))

start_times <- time_correction[, .(start_time = median(start_time)), by = c("ppid", "trial_num_in_block", "time")]

start_times %>%
  fwrite(here::here("data", "study_one", "ppt_start_times.csv"))


# Manual data fixes/filters
ppt_m <- time_correction[
  # Only beginning and out phases, 10hz filter. Remove values that would break an analysis.
  (phase %in% c("begin", "out") | (ppid %in% c("d1-003", "d1-024") & phase == "start") |
    (phase == "lift" & time_ms_perphase < 100)) &
    !is.infinite(velocity) &
    !is.infinite(accel) &
    !is.infinite(accel_filtvel) &
    time_ms_fix >= 0
  ][
    ppid == "d1-022" & block_num > 1,
    block_num := block_num + 1
  ][
  ,
  .(
    ppid, time, phase,
    block_num, trial_num_in_block,
    time_ms_perphase, time_ms, time_ms_fix,
    velocity, velocity_10hz,
    accel, accelfilt, accel_filtvel,
    accel_filtvel_filt
  )
][
  (ppid == "d1-003" & phase == "start")
  | (ppid == "d1-024" & phase == "start" & trial_num_in_block == 7),
  phase := "begin"
]

```

# Individualized Adjustments

The below code lays out the individualized adjustments made to ensure the correct peaks and latencies are chosen for each participant. To see the consequences of these choices, see the individual trial plots in 01b_reaching_trials.qmd.

```{r individual-adjustments}
ppt_m_ <- ppt_m[,
  # Compute kinematic peaks and latencies
  # fcase used to manually identify ranges within which the peak occurs
  .(

    vel_m_filt = fcase(
      
      (ppid == "d1-006" &
        trial_num_in_block == 8 &
        time == "pre"
      ),
      max(
        ppt_m[
          ppid == "d1-006" &
          trial_num_in_block == 8 &
          time == "pre" &
          time_ms_fix < 800
        ][
        ,
        velocity_10hz
        ], na.rm = TRUE
      ),

      (
        ppid == "d1-009" &
        trial_num_in_block == 11 &
        time == "pre"
      ),
      max(
        ppt_m[
          ppid == "d1-009" &
          trial_num_in_block == 11 &
          time == "pre" &
          time_ms_fix < 500,
          velocity_10hz
        ], na.rm = TRUE
      ),
      
      (
        ppid == "d1-013" &
        trial_num_in_block == 2 &
        time == "pre"
      ),
      max(
        ppt_m[
          ppid == "d1-013" &
          trial_num_in_block == 2 &
          time == "pre" &
          time_ms_fix < 900,
          velocity_10hz
        ], na.rm = TRUE
      ),
      
      (
        ppid == "d1-013" &
        trial_num_in_block == 1 &
        time == "post"
      ),
      max(
        ppt_m[
          ppid == "d1-013" &
          trial_num_in_block == 1 &
          time == "post" &
          time_ms_fix < 360,
          velocity_10hz
          ], na.rm = TRUE
      ),
      (
        ppid == "d1-014" &
        trial_num_in_block == 12 &
        time == "pre"
      ),
      max(
        ppt_m[
          ppid == "d1-014" &
          trial_num_in_block == 12 &
          time == "pre" &
          time_ms_fix < 540,
          velocity_10hz
          ], na.rm = TRUE
      ),

      default = .SD[
        phase %in% c("begin", "out")
        ,
        max(velocity_10hz, na.rm = TRUE)
      ]
    ),

    # Velocity Latency ----------------------------------------------------
    vel_lat_filt = fcase(

      (
        ppid == "d1-006" &
        trial_num_in_block == 8 &
        time == "pre"
      ),
      max(
        ppt_m[
        ppid == "d1-006" &
        trial_num_in_block == 8 &
        time == "pre" &
        time_ms_fix < 800][which.max(velocity_10hz), time_ms_fix][1]
      ),

      (
        ppid == "d1-009" &
        trial_num_in_block == 11 &
        time == "pre"),
      (
        ppt_m[
          ppid == "d1-009" &
          trial_num_in_block == 11 &
          time == "pre" &
          time_ms_fix < 500][which.max(velocity_10hz), time_ms_fix][1]
      ),

      (
        ppid == "d1-013" &
        trial_num_in_block == 2 &
        time == "pre"),
      (
        ppt_m[
          ppid == "d1-013" &
          trial_num_in_block == 2 &
          time == "pre" &
          time_ms_fix < 900][which.max(velocity_10hz), time_ms_fix][1]
      ),

      (
        ppid == "d1-013" &
        trial_num_in_block == 1 &
        time == "post"
      ),
      (
        ppt_m[
          ppid == "d1-013" &
          trial_num_in_block == 1 &
          time == "post" &
          time_ms_fix < 360][which.max(velocity_10hz), time_ms_fix][1]
      ),

      (
        ppid == "d1-014" &
        trial_num_in_block == 12 &
        time == "pre"
      ),
      (
        ppt_m[
          ppid == "d1-014" &
          trial_num_in_block == 12 &
          time == "pre" &
          time_ms_fix < 540][which.max(velocity_10hz), time_ms_fix][1]
      ),

      default = .SD[
        which.max(velocity_10hz),
        time_ms_fix
      ][1]
    ),

    # Acceleration Peak ------------------------------------------------
     acc_m_filtfilt = fcase(
      (
        ppid == "d1-003" &
        trial_num_in_block == 10 &
        time == "post"
        ),
      max(
        ppt_m[
          ppid == "d1-003" &
          trial_num_in_block == 10 &
          time == "post" &
          time_ms_fix < 425
          ][
          ,
          accel_filtvel_filt
        ], na.rm = TRUE
        ),


      (
        ppid == "d1-004" &
        trial_num_in_block == 15 &
        time == "post"
        ),
      max(
        ppt_m[
          ppid == "d1-004" &
          trial_num_in_block == 15 &
          time == "post" &
          time_ms_fix < 500
          ][
          ,
          accel_filtvel_filt
        ], na.rm = TRUE
        ),

      (
        ppid == "d1-006" &
        trial_num_in_block == 2 &
        time == "pre"
        ),
      max(
        ppt_m[
          ppid == "d1-006" &
          trial_num_in_block == 2 &
          time == "pre" &
          time_ms_fix < 800
          ][
          ,
          accel_filtvel_filt
        ], na.rm = TRUE
        ),

      (ppid == "d1-006" &
        trial_num_in_block == 4 &
        time == "pre"),
      max(ppt_m[ppid == "d1-006" &
        trial_num_in_block == 4 &
        time == "pre" &
        time_ms_fix < 500][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),

      (ppid == "d1-006" &
        trial_num_in_block == 8 &
        time == "pre"),
      max(ppt_m[ppid == "d1-006" &
        trial_num_in_block == 8 &
        time == "pre" &
        time_ms_fix < 800][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),

      (ppid == "d1-009" &
        trial_num_in_block == 11 &
        time == "pre"),
      max(ppt_m[ppid == "d1-009" &
        trial_num_in_block == 11 &
        time == "pre" &
        time_ms_fix < 400][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),


      (ppid == "d1-013" &
        trial_num_in_block == 2 &
        time == "pre"),
      max(ppt_m[
        ppid == "d1-013" &
          trial_num_in_block == 2 &
          time == "pre" &
          time_ms_fix < 900,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (
        ppid == "d1-013" &
        trial_num_in_block %in% c(1, 4) &
        time == "post"
      ),
      max(ppt_m[
        ppid == "d1-013" &
          trial_num_in_block %in% c(1, 4) &
          time == "post" &
          time_ms_fix < 500,
        accel_filtvel_filt
      ], na.rm = TRUE),

      (ppid == "d1-008" &
        trial_num_in_block == 12 &
        time == "post"),
      max(ppt_m[
        ppid == "d1-008" &
          trial_num_in_block == 12 &
          time == "post" &
          time_ms_fix < 250,
        accel_filtvel_filt
      ], na.rm = TRUE),

      ppid == "d1-021",
      .SD[
        time_ms_fix < 300,
        max(
          accel_filtvel_filt,
          na.rm = TRUE
          )
          ],


      (
        ppid == "d1-024" &
        trial_num_in_block == 6 &
        time == "pre"
      ),
      ppt_m[
        ppid == "d1-024" &
          trial_num_in_block == 6 &
          time == "pre" &
          time_ms_fix < 290,
        max(accel_filtvel_filt, na.rm = TRUE)
      ],
      default = max(accel_filtvel_filt, na.rm = TRUE)
    ),

# Deceleration peak -------------------------------------------------------
    dec_m_filtfilt = fcase(
      (ppid == "d1-001" &
        trial_num_in_block == 10 &
        time == "post"),
      min(ppt_m[ppid == "d1-001" &
        trial_num_in_block == 10 &
        time == "post" &
        time_ms_fix < 600 &
        time_ms_fix > 200][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-001" &
        trial_num_in_block == 11 &
        time == "post"),
      min(ppt_m[ppid == "d1-001" &
        trial_num_in_block == 11 &
        time == "post" &
        time_ms_fix > 200 &
        time_ms_fix < 900][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-004" &
        trial_num_in_block == 3 &
        time == "pre"),
      min(ppt_m[ppid == "d1-004" &
        trial_num_in_block == 3 &
        time == "pre" &
        time_ms_fix > 350][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-006" &
        trial_num_in_block == 2 &
        time == "pre"),
      min(ppt_m[ppid == "d1-006" &
        trial_num_in_block == 2 &
        time == "pre" &
        time_ms_fix < 800 &
        time_ms_fix > 300][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-006" &
        trial_num_in_block == 4 &
        time == "pre"),
      min(ppt_m[ppid == "d1-006" &
        trial_num_in_block == 4 &
        time == "pre" &
        time_ms_fix > 900][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-006" &
        trial_num_in_block == 8 &
        time == "pre"),
      min(ppt_m[ppid == "d1-006" &
        trial_num_in_block == 8 &
        time == "pre" &
        time_ms_fix < 850][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-006" &
        trial_num_in_block == 15 &
        time == "pre"),
      min(ppt_m[ppid == "d1-006" &
        trial_num_in_block == 15 &
        time == "pre" &
        time_ms_fix < 1200][, accel_filtvel_filt], na.rm = TRUE),
      (ppid == "d1-006" &
        trial_num_in_block == 16 &
        time == "post"),
      min(ppt_m[ppid == "d1-006" &
        trial_num_in_block == 16 &
        time == "post" &
        time_ms_fix < 1000][, accel_filtvel_filt], na.rm = TRUE),
      (ppid == "d1-006" &
        trial_num_in_block == 15 &
        time == "post"),
      min(ppt_m[ppid == "d1-006" &
        trial_num_in_block == 15 &
        time == "post" &
        time_ms_fix > 520][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-008" &
        trial_num_in_block == 12 &
        time == "post"),
      min(ppt_m[ppid == "d1-008" &
        trial_num_in_block == 12 &
        time == "post" &
        time_ms_fix > 950][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-009" &
        trial_num_in_block == 10 &
        time == "pre"),
      min(ppt_m[ppid == "d1-009" &
        trial_num_in_block == 10 &
        time == "pre" &
        time_ms_fix > 550][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-013" &
        trial_num_in_block == 2 &
        time == "pre"),
      min(ppt_m[ppid == "d1-016" &
        trial_num_in_block == 12 &
        time == "pre" &
        time_ms_fix > 340][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-016" &
        trial_num_in_block == 12 &
        time == "pre"),
      min(ppt_m[ppid == "d1-016" &
        trial_num_in_block == 12 &
        time == "pre" &
        time_ms_fix > 340][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      (ppid == "d1-021" &
        trial_num_in_block == 17 &
        time == "pre"),
      min(ppt_m[ppid == "d1-021" &
        trial_num_in_block == 17 &
        time == "pre" &
        time_ms_fix > 345][
        ,
        accel_filtvel_filt
      ], na.rm = TRUE),
      default = min(accel_filtvel_filt, na.rm = TRUE)
    ),

# Acceleration Latency ----------------------------------------------
    acc_lat_filtfilt = fcase(

      (
        ppid == "d1-003" &
        trial_num_in_block == 10 &
        time == "post"
      ),
      ppt_m[
          ppid == "d1-003" &
          trial_num_in_block == 10 &
          time == "post" &
          time_ms_fix < 425
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix][1],

      (
        ppid == "d1-004" &
        trial_num_in_block == 15 &
        time == "post"
      ),
      ppt_m[
          ppid == "d1-004" &
          trial_num_in_block == 15 &
          time == "post" &
          time_ms_fix < 500
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix][1],

      (
        ppid == "d1-006" &
        trial_num_in_block == 2 &
        time == "pre"
      ),
      ppt_m[
          ppid == "d1-006" &
          trial_num_in_block == 2 &
          time == "pre" &
          time_ms_fix < 800
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix][1],

      (
        ppid == "d1-006" &
        trial_num_in_block == 8 &
        time == "pre"
      ),
      ppt_m[
          ppid == "d1-006" &
          trial_num_in_block == 8 &
          time == "pre" &
          time_ms_fix < 800
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix][1],

      (
        ppid == "d1-008" &
        trial_num_in_block == 12 &
        time == "post"
      ),
      ppt_m[
          ppid == "d1-008" &
          trial_num_in_block == 12 &
          time == "post" &
          time_ms_fix > 250
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix][1],

        (
          ppid == "d1-009" &
          trial_num_in_block == 11 &
          time == "pre"
        ),
      ppt_m[
          ppid == "d1-009" &
          trial_num_in_block == 11 &
          time == "pre" &
          time_ms_fix < 250
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix][1],

      (
        ppid == "d1-013" &
        trial_num_in_block == 2 &
        time == "pre"
      ),
      ppt_m[
          ppid == "d1-013" &
          trial_num_in_block == 2 &
          time == "pre" &
          time_ms_fix < 500
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix
        ][1],

      (
        ppid == "d1-013" &
        trial_num_in_block %in% c(1, 4) &
        time == "post"
      ),
      ppt_m[
          ppid == "d1-013" &
          trial_num_in_block %in% c(1, 4) &
          time == "post" &
          time_ms_fix < 500
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix
        ][1],

      ppid == "d1-014",
      .SD[
        time_ms_fix < 300
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix
        ][1],

      (
        ppid == "d1-014" &
        trial_num_in_block == 12 &
        time == "pre"
      ),
      ppt_m[
          ppid == "d1-014" &
          trial_num_in_block == 12 &
          time == "pre" &
          time_ms_fix < 300
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix
        ][1],


      ppid == "d1-021",
      .SD[
        time_ms_fix < 300
        ][
          which.max(accel_filtvel_filt),
          time_ms_fix
        ][1],


      (
        ppid == "d1-024" &
        trial_num_in_block == 6 &
        time == "pre"
      ),
      ppt_m[ppid == "d1-024" &
          trial_num_in_block == 6 &
          time == "pre" &
          time_ms_fix < 290
        ][
          which.max(accel_filtvel_filt), time_ms_fix
        ][1],

      default = .SD[which.max(accel_filtvel_filt), time_ms_fix][1]
    ),

    dec_lat_filtfilt = fcase(

      (ppid == "d1-004" &
        trial_num_in_block == 3 &
        time == "pre"),
      ppt_m[ppid == "d1-004" &
        trial_num_in_block == 3 &
        time == "pre" &
        time_ms_fix > 680][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-006" &
        trial_num_in_block == 2 &
        time == "pre"),
      ppt_m[ppid == "d1-006" &
        trial_num_in_block == 2 &
        time == "pre" &
        time_ms_fix < 800 &
        time_ms_fix > 300][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-006" &
        trial_num_in_block == 8 &
        time == "pre"),
      ppt_m[ppid == "d1-006" &
        trial_num_in_block == 8 &
        time == "pre" &
        time_ms_fix < 900][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-006" &
        trial_num_in_block == 10 &
        time == "pre"),
      ppt_m[ppid == "d1-006" &
        trial_num_in_block == 10 &
        time == "pre" &
        time_ms_fix > 500 &
        time_ms_fix < 1000][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-006" &
        trial_num_in_block == 15 &
        time == "pre"),
      ppt_m[ppid == "d1-006" &
        trial_num_in_block == 15 &
        time == "pre" &
        time_ms_fix < 1200][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-006" &
        trial_num_in_block == 16 &
        time == "post"),
      ppt_m[ppid == "d1-006" &
        trial_num_in_block == 16 &
        time == "post" &
        time_ms_fix < 900][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-006" &
        trial_num_in_block == 15 &
        time == "post"),
      ppt_m[ppid == "d1-006" &
        trial_num_in_block == 15 &
        time == "post" &
        time_ms_fix > 520][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-008" &
        trial_num_in_block == 12 &
        time == "post"),
      ppt_m[ppid == "d1-008" &
        trial_num_in_block == 12 &
        time == "post" &
        time_ms_fix > 950][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-009" &
        trial_num_in_block == 10 &
        time == "pre"),
      ppt_m[ppid == "d1-009" &
        trial_num_in_block == 10 &
        time == "pre" &
        time_ms_fix > 550][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-013" &
        trial_num_in_block == 2 &
        time == "pre"),
      ppt_m[ppid == "d1-013" &
        trial_num_in_block == 2 &
        time == "pre" &
        time_ms_fix < 1050 &
        time_ms_fix > 525][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-016" &
        trial_num_in_block == 12 &
        time == "pre"),
      ppt_m[ppid == "d1-016" &
        trial_num_in_block == 12 &
        time == "pre" &
        time_ms_fix > 340][which.min(accel_filtvel_filt), time_ms_fix][1],

      (ppid == "d1-021" &
        trial_num_in_block == 17 &
        time == "pre"),
      ppt_m[ppid == "d1-021" &
        trial_num_in_block == 17 &
        time == "pre" &
        time_ms_fix > 345][which.min(accel_filtvel_filt), time_ms_fix][1],

      default = .SD[
        time_ms_fix > 100
      ][
        which.min(accel_filtvel_filt), time_ms_fix
      ][1]
          )
       ),
        by = c(
          "ppid",
          "trial_num_in_block",
          "block_num",
          "time"
        )
      ]


test <- ppt_m_[
  dec_lat_filtfilt < acc_lat_filtfilt |
    dec_lat_filtfilt < vel_lat_filt |
    acc_lat_filtfilt > vel_lat_filt
]

test

```

Note: Accelerations for d1-001 are removed prior to analysis, so their presence in the above test is inconsequential.

# Removals, Imputation and Export

A single trial's accelerations for participants 18 and 21 were removed from analysis due to distortions. A single trial's decelerations were removed for participants 14 and 21. These were imputed using a missing forest approach.

Participant 1's accelerations and acceleration latencies were removed from analysis due to a delay in the start of recording. These were not imputed, as there was insufficient information to do so confidently.

```{r imputation-and-export}
d <- complete(ppt_m_, ppid, trial_num_in_block, time) %>% as.data.table()
d <- d[
  ppid == "d1-003" & time == "post",
  block_num := 4
][
  ,
  `:=`(
    ppid = factor(ppid),
    time = factor(time),
    trial_num_in_block = factor(trial_num_in_block),
    order = fcase(
      block_num < 3, "pre",
      block_num == 4, "first",
      block_num == 5, "second"
    )
  )
][
  (ppid == "d1-021" & time == "pre" & trial_num_in_block == 17)
  | (ppid == "d1-018" & time == "pre" & trial_num_in_block == 2),
  `:=`(acc_lat_filtfilt = NA,
       acc_m_filtfilt = NA) 
][
  (ppid == "d1-014" & time == "pre" & trial_num_in_block == 4)
  | (ppid == "d1-021" & time == "post" & trial_num_in_block == 4),
  `:=`(dec_lat_filtfilt = NA,
       dec_m_filtfilt = NA)
]


# Use a linear model to impute any missing trials
set.seed(1337)
d_imputed <- d %>% 
simputation::impute_mf(
  formula = vel_m_filt + vel_lat_filt 
    + acc_m_filtfilt + dec_m_filtfilt 
    + acc_lat_filtfilt + dec_lat_filtfilt 
    ~ trial_num_in_block 
    + ppid 
    + time
    )

write_csv(
    d_imputed[
        ppid %in% c("d1-001"),
        `:=`(
            acc_lat_filtfilt = NA,
            acc_m_filtfilt = NA,
            vel_lat_filt = NA,
            dec_lat_filtfilt = NA
        )
    ], here::here("data", "study_one", "ppt_manual.csv")
)

```