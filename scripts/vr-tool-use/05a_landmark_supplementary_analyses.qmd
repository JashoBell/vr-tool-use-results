---
title: "VR - Supplementary Analyses - Landmark"
author: "Joshua Bell"
format:
  html:
    toc: true
    toc-depth: 3
    toc-float: true
    toc-placement: left
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE, 
                      message = FALSE, 
                      cache = TRUE, 
                      fig.width = 12, 
                      fig.height = 8)
pkgs <- c("dplyr", "readr", "magrittr", "data.table", "here", "brms", "cmdstanr", "datawizard", "bayestestR", "flextable", "ggplot2", "tidybayes")
for(i in pkgs){
  if(!i %in% rownames(installed.packages())){ 
    install.packages(i) 
    library(i, character.only = TRUE)
  }
  else(library(i, character.only = TRUE))
}

options(
  "mc.cores" = parallel::detectCores(),
  "brms.backend" = "cmdstan",
  "brms.file_refit" = "on_change"
)

control_list = list(adapt_delta = .99, max_treedepth = 15)

b = 16000/parallel::detectCores()
i = 48000/parallel::detectCores()
ch = parallel::detectCores()
co = parallel::detectCores()
```

```{r import}
armlength_df <- fread(
  here::here("data", "study_one", "landmark_armlength.csv")
  ) 
armlength_df <- armlength_df[
    !ppid %in% c("d1-004", "d1-006")
][,
    `:=`(
        perceived_std = datawizard::standardise(perceived),
        ratio_std = datawizard::standardise(ratio),
        time = factor(time, levels = c("Pre", "Post"))
    )
]

armlength_df_lapsefix <- fread(
  here::here("data", "study_one", "landmark_armlength_lapsefix.csv")
  ) 
armlength_df_lapsefix[
  !ppid %in% c("d1-004", "d1-006")
  ][,
  `:=`(
      perceived_std = datawizard::standardise(perceived),
      ratio_std = datawizard::standardise(ratio),
      time = factor(time, levels = c("Pre", "Post"))
    )
  ]

```


# Landmark Task

## By-trial Errors

To address the possibility that the short effect of tool-use is present in landmark localization as well as kinematics, we reran the original landmark models using the same arrangement of trials as above.

### Plots

```{r landmark-trials}
landmark <- read_csv(here::here("data", "study_one", "landmark.csv")) %>%
  dplyr::select(ppid, trial, time, forearmlength, lapse_fix_target, lapse_fix_error) %>%
  mutate(error_std = standardize(lapse_fix_error),
         target = factor(lapse_fix_target,
            levels = c("Elbow", "Forearm", "Wrist")),
         error_cm = lapse_fix_error * 100,
         time = factor(time,
            levels = c("pre", "post"),
            labels= c("Pre", "Post")),
         overall_trial = fifelse(
            time == "Pre",
            trial,
            trial + 18
         )) %>%
         as.data.table()



(lm_empirical <- landmark %>%
ggplot(aes(y = error_cm,
  x = overall_trial,
  fill = time,
  color = time)) +
  geom_point(alpha = .2) +
  geom_line(
    data = landmark %>% 
      group_by(time, overall_trial, target) %>% 
      summarise(
        error_cm = mean(error_cm, na.rm = TRUE)),
    aes(y = error_cm)) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_grid(~target)+
  theme_tidybayes() +
  scale_x_discrete(expand = c(0, 0))+
  scale_y_continuous(limits = c(-25, 25), expand = c(0, 0)) +
  scale_fill_manual(breaks = c("Pre", "Post"),
    values = c("#001015", "#09A1D7"),
    labels = c("Pre", "Post")) +
  scale_color_manual(breaks = c("Pre", "Post"),
    values = c("#001015", "#09A1D7"),
    labels = c("Pre", "Post")) +
  labs(y = "Error (cm)", x = "Trial", fill = "Time", color = "Time", title = "Body Landmark Task Response Distributions") +
  theme(axis.text.y = element_text(hjust = 0),
        title = element_text(size = 16),
        text = element_text(size = 14, color = "black"),
        strip.background = element_blank(),
        strip.placement = "inside",
        strip.switch.pad.wrap = unit(0, "in"),
        panel.background = element_rect(fill = "transparent", colour = NA), 
        legend.background = element_rect(fill = "transparent", colour = NA),  
        plot.background = element_rect(fill = "transparent", colour = NA)))

```

## Perceived Arm Length Models

### Prior
```{r perceived-prior}
lm_perceived_priors <- brm(
  perceived_std ~ 1 + time + (1 | ppid), 
  data = armlength_df, 
  family = gaussian,
  prior = c(
    set_prior(prior = "normal(.2, 2)", class = "b", coef = "timePost"),
    set_prior(prior = "normal(0, 2)", class = "Intercept"),
    set_prior(prior = "exponential(1)", class = "sd"), 
    set_prior(prior = "exponential(1)", class = "sigma")
    #set_prior(prior = "lkj(1)", class = "cor", group = "ppid")
  ),
  sample_prior = "only",
  seed = 1337,
  silent = TRUE, refresh = 0,
  save_pars = save_pars(all = TRUE),
  warmup = b, iter = i, chains = ch, cores = co,
  control = control_list
  )

plot(lm_perceived_priors)
summary(lm_perceived_priors)
```

### Posterior

```{r perceived-posterior}
lm_perceived <- update(
  lm_perceived_priors,
  sample_prior = "no",
  refresh = 0,
  seed = 1337,
  file = here::here("scripts", "for_osf", "tooluse_in_VR", "models", "supplementary", "landmark_perceived.rds")
  )

plot(lm_perceived)
summary(lm_perceived)

pp_check(lm_perceived, ndraws = 50) +
  theme_tidybayes() +
  theme(
    axis.text.y = element_blank()
  ) +
  labs(
    title = "Landmark Task: Perceived Arm Length",
    subtitle = "Posterior Draws vs. Empirical Distribution",
    x = "Velocity (mm/s)"
  )

lm_bf <- bayesfactor_pointnull(
  lm_perceived,
  prior = lm_perceived_priors
  ) %>% as.data.table()

lm_describe <- bayestestR::describe_posterior(
  lm_perceived,
  centrality = "map",
  ci_method="hdi"
  ) %>% 
  dplyr::filter(Parameter == "b_timePost") %>% 
  mutate("Outcome" = "Perceived Arm Length")

(
  lm_describe <- bind_cols(
    lm_describe,
    "BF" = exp(
        lm_bf[Parameter == "b_timePost",
        log_BF]
        )
        )
)
```


```{r}
participant_info <- fread(here::here("data", "1_tooluseinvr", "participant_info.csv")) %>%
    select(
        ppid, age, gender, fatigue, performance_hypothesis
    ) %>%
    mutate(
        fatigue = factor(fatigue, levels = c(0, 1), labels = c("No", "Yes")),
        performance_hypothesis = factor(performance_hypothesis, levels = c(0, 1), labels = c("No", "Yes"))
    )


participant_info_and_landmark <- landmark %>%
    left_join(participant_info, by = "ppid") %>%
    mutate(
        overall_trial = fifelse(
            time == "Post",
            trial + 18,
            trial
        )
    )

(lm_empirical <- participant_info_and_landmark %>%
    ggplot(aes(
        y = error_cm,
        x = overall_trial,
        fill = fatigue,
        color = fatigue,
        group = interaction(time, fatigue)
    )) +
    geom_point(alpha = .2) +
    geom_line(
        data = participant_info_and_landmark %>%
            group_by(fatigue, time, overall_trial, target) %>%
            summarise(
                error_cm = mean(error_cm, na.rm = TRUE)
            ),
        aes(y = error_cm)
    ) +
    geom_hline(yintercept = 0, linetype = "dashed") +
    facet_grid(~target) +
    theme_tidybayes() +
    scale_x_discrete(expand = c(0, 0)) +
    scale_y_continuous(limits = c(-25, 25), expand = c(0, 0)) +
    scale_fill_manual(
        breaks = c("No", "Yes"),
        values = c("#001015", "#09A1D7"),
        labels = c("No", "Yes")
    ) +
    scale_color_manual(
        breaks = c("No", "Yes"),
        values = c("#001015", "#09A1D7"),
        labels = c("No", "Yes")
    ) +
    labs(y = "Error (cm)", x = "Trial", fill = "Fatigue", color = "Fatigue", title = "Body Landmark Task Response Distributions") +
    theme(
        axis.text.y = element_text(hjust = 0),
        title = element_text(size = 16),
        text = element_text(size = 14, color = "black"),
        strip.background = element_blank(),
        strip.placement = "inside",
        strip.switch.pad.wrap = unit(0, "in"),
        panel.background = element_rect(fill = "transparent", colour = NA),
        legend.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA)
    ))

participant_info_and_landmark %>%
group_by(fatigue, time, target) %>%
summarise(
    mean_error = mean(error_cm, na.rm = TRUE),
    sd_error = sd(error_cm, na.rm = TRUE)
)
```

```{r}
sessioninfo::package_info()
```