---
title: "Real-world - Posteriors - Landmark"
author: "Joshua Bell"
format:
  html:
    toc: true
    toc-depth: 3
    toc-float: true
    toc-placement: left
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

pkgs <- c("dplyr", "tidyr", "magrittr", "readr", "stringr", "data.table", "here", "plotly", "ggplot2", "gghalves", "ggthemes", "flextable", "officer", "equatags", "tidybayes")
for(i in pkgs){
  if(!i %in% rownames(installed.packages())){ 
    install.packages(i) 
    library(i, character.only = TRUE)
  }
  else(library(i, character.only = TRUE))
}

#Empirical data
landmark <- read_csv(here::here("data", "study_two", "landmark.csv")) %>% as.data.table()

landmark_summary <- landmark %>% select(ppid, trial, time,
                                        forearmlength, target,
                                        error, lapse_fix_target,
                                        lapse_fix_error) %>%
  mutate(error_std = datawizard::standardize(error),
         forearmlength_std = datawizard::standardize(forearmlength),
         lapse_fix_error_std = datawizard::standardize(lapse_fix_error),
         lapse_fix_target = factor(
          lapse_fix_target,
          levels = c("Forearm", "Wrist", "Elbow")),
         time = factor(time,
          levels = c("pre", "post"),
          labels = c("Pre", "Post")),
         target = factor(target,
          levels = c("Forearm", "Wrist", "Elbow")))


#Model data
landmark_model <- readRDS(here::here("scripts", "for_osf", "tooluse_in_real", "models", "landmark_error_time_target.rds"))
landmark_lapsefix_model <- readRDS(here::here("scripts", "for_osf", "tooluse_in_real", "models","landmark_lapsefix_error_time_target.rds"))
```

# Posterior Visualizations

## Expected Parameter Values

```{r expected_draws}
#Extract predictive draws from landmark using the loaded models and the tidybayes predicted_draws function
posterior_expected_value <- landmark_summary %>%
  distinct(
    target,
    time
    ) %>%
  add_epred_draws(
    landmark_model,
    re_formula = ~ time * target,
    seed = 1337,
    allow_new_levels = F,
    ndraws = 10000
    ) %>%
  mutate(
    .epred = (
      .epred 
        * sd(landmark_summary$error) 
        + mean(landmark_summary$error)
      ) 
     * 100) %>%
    as.data.table() %>%
        mutate(target = factor(target, levels = c("Elbow", "Forearm", "Wrist")))

posterior_expected_value_lapsefix <- landmark_summary %>%
  distinct(
    target,
    time
    ) %>%
  add_epred_draws(
    landmark_lapsefix_model,
    re_formula = ~ time * target,
    seed = 1337,
    allow_new_levels = F,
    ndraws = 10000
    ) %>%
  mutate(
    .epred = (
      .epred 
        * sd(landmark_summary$error) 
        + mean(landmark_summary$error)
      ) 
      * 100) %>%
    as.data.table() %>%
        mutate(target = factor(target, levels = c("Elbow", "Forearm", "Wrist")))
```

```{r expected_draws_plot}
landmark_posterior_expected_value_plot <- posterior_expected_value %>%
ggplot(aes(y = .epred,
  x = time,
  fill = time,
  color = time)) + 
  stat_pointinterval(data = posterior_expected_value[time == "Post"],
                     point_interval = mean_qi, 
                     show_slab = FALSE, 
                     position = position_nudge(x = -.45)) +
  stat_pointinterval(data = posterior_expected_value[time == "Pre"],
                   point_interval = mean_qi, 
                   show_slab = FALSE, 
                   position = position_nudge(x = .45)) +
  geom_half_point(data = posterior_expected_value[time == "Post"], 
                  side = "r", 
                  range_scale = .5,
                  alpha = .6) +
  geom_half_point(data = posterior_expected_value[time == "Post"], 
                side = "r", 
                range_scale = .5,
                alpha = .6) +
  geom_half_point(data = posterior_expected_value[time == "Pre"],
                  side = "l", 
                  range_scale = .5,
                  alpha = .6) +
  stat_slab(data = posterior_expected_value[time == "Post"],
            alpha = .8, 
            scale = .4,
            side = "left") +  
  stat_slab(data = posterior_expected_value[time == "Pre"],
            alpha = .8, 
            scale = .4, 
            side = "right") +
  #geom_text(data = landmark_two_bfs, aes(y = 25, x = 1.5, label = paste("BF[null]", "==", BF), fill = NA), color = "black", check_overlap = TRUE, size = 11, parse = TRUE) +
  geom_hline(yintercept = 0, linetype = "longdash", color = "black", alpha = .8) +
  facet_wrap(~target)+
  theme_tidybayes() +
  scale_x_discrete(limits = c("Pre", "Post"),
                   expand = c(0, 0),
                   labels = c("Pre", "Post"))+
  scale_y_continuous(limits = c(-25, 25), expand = c(0, 0), breaks = seq(-20, 20, 5)) +
  scale_fill_manual(breaks = c("Pre", "Post"),
    values = c("#001015", "#09A1D7"),
    labels = c("Pre", "Post")) +
  scale_color_manual(breaks = c("Pre", "Post"),
    values = c("#001015", "#09A1D7"),
    labels = c("Pre", "Post")) +
  labs(y = "Error (cm)", x = "Time", fill = "Time", color = "Time", title = "Body Landmark Task Posterior Distributions") +
  theme(axis.text.y = element_text(hjust = 0),
        title = element_text(size = 14),
        text = element_text(size = 14, color = "black"),
        strip.background = element_blank(),
        strip.placement = "inside",
        strip.switch.pad.wrap = unit(0, "in"),
        panel.background = element_rect(fill = "transparent", colour = NA), 
        legend.background = element_rect(fill = "transparent", colour = NA),  
        plot.background = element_rect(fill = "transparent", colour = NA))

landmark_lapsefix_posterior_expected_value_plot <- posterior_expected_value_lapsefix %>%
ggplot(aes(y = .epred,
  x = time,
  fill = time,
  color = time)) + 
  stat_pointinterval(data = posterior_expected_value_lapsefix[time == "Post"],
                     point_interval = mean_qi, 
                     show_slab = FALSE, 
                     position = position_nudge(x = -.45)) +
  stat_pointinterval(data = posterior_expected_value_lapsefix[time == "Pre"],
                   point_interval = mean_qi, 
                   show_slab = FALSE, 
                   position = position_nudge(x = .45)) +
  geom_half_point(data = posterior_expected_value_lapsefix[time == "Post"], 
                  side = "r", 
                  range_scale = .5,
                  alpha = .6) +
  geom_half_point(data = posterior_expected_value_lapsefix[time == "Post"], 
                side = "r", 
                range_scale = .5,
                alpha = .6) +
  geom_half_point(data = posterior_expected_value_lapsefix[time == "Pre"],
                  side = "l", 
                  range_scale = .5,
                  alpha = .6) +
  stat_slab(data = posterior_expected_value_lapsefix[time == "Post"],
            alpha = .8, 
            scale = .4,
            side = "left") +  
  stat_slab(data = posterior_expected_value_lapsefix[time == "Pre"],
            alpha = .8, 
            scale = .4, 
            side = "right") +
  #geom_text(data = landmark_two_bfs, aes(y = 25, x = 1.5, label = paste("BF[null]", "==", BF), fill = NA), color = "black", check_overlap = TRUE, size = 11, parse = TRUE) +
  geom_hline(yintercept = 0, linetype = "longdash", color = "black", alpha = .8) +
  facet_wrap(~target)+
  theme_tidybayes() +
  scale_x_discrete(limits = c("Pre", "Post"),
                   expand = c(0, 0),
                   labels = c("Pre", "Post"))+
  scale_y_continuous(limits = c(-25, 25), expand = c(0, 0), breaks = seq(-20, 20, 5)) +
  scale_fill_manual(breaks = c("Pre", "Post"),
    values = c("#001015", "#09A1D7"),
    labels = c("Pre", "Post")) +
  scale_color_manual(breaks = c("Pre", "Post"),
    values = c("#001015", "#09A1D7"),
    labels = c("Pre", "Post")) +
  labs(y = "Error (cm)", x = "Time", fill = "Time", color = "Time", title = "Body Landmark Task Posterior Distributions") +
  theme(axis.text.y = element_text(hjust = 0),
        title = element_text(size = 14),
        text = element_text(size = 14, color = "black"),
        strip.background = element_blank(),
        strip.placement = "inside",
        strip.switch.pad.wrap = unit(0, "in"),
        panel.background = element_rect(fill = "transparent", colour = NA), 
        legend.background = element_rect(fill = "transparent", colour = NA),  
        plot.background = element_rect(fill = "transparent", colour = NA))

landmark_posterior_expected_value_plot
landmark_lapsefix_posterior_expected_value_plot

saveRDS(landmark_posterior_expected_value_plot, here::here("scripts", "for_osf", "tooluse_in_real", "figures", "landmark_posterior_parameter_plot.rds"))
```

## Predictive Distributions

```{r predicted_draws}
#Extract predictive draws from landmark using the loaded models and the tidybayes predicted_draws function
posterior_predictions <- landmark_summary %>%
  distinct(
    ppid,
    target,
    trial,
    time
    ) %>%
  add_predicted_draws(
    landmark_model,
    re_formula = ~ time * target,
    seed = 1337,
    allow_new_levels = F,
    ndraws = 25
    ) %>%
  mutate(.prediction = (.prediction + mean(landmark_summary$error)) * sd(landmark_summary$error) * 100) %>%
    as.data.table() %>%
        mutate(target = factor(target, levels = c("Elbow", "Forearm", "Wrist")))

posterior_predictions_lapsefix <- landmark_summary %>%
  distinct(
    ppid,
    target,
    trial,
    time
    ) %>%
  add_predicted_draws(
    landmark_lapsefix_model,
    re_formula = ~ time * target,
    seed = 1337,
    allow_new_levels = F,
    ndraws = 25
    ) %>%
  mutate(.prediction = (.prediction + mean(landmark_summary$error)) * sd(landmark_summary$error) * 100) %>%
    as.data.table() %>%
        mutate(target = factor(target, levels = c("Elbow", "Forearm", "Wrist")))
```

```{r posterior_prediction_plots}
landmark_posterior_predictive_plot <- posterior_predictions %>%
ggplot(aes(y = .prediction,
  x = time,
  fill = time,
  color = time)) + 
  stat_pointinterval(data = posterior_predictions[time == "Post"],
                     point_interval = mean_qi, 
                     show_slab = FALSE, 
                     position = position_nudge(x = -.45)) +
  stat_pointinterval(data = posterior_predictions[time == "Pre"],
                   point_interval = mean_qi, 
                   show_slab = FALSE, 
                   position = position_nudge(x = .45)) +
  geom_half_point(data = posterior_predictions[time == "Post"], 
                  side = "r", 
                  range_scale = .5,
                  alpha = .6) +
  geom_half_point(data = posterior_predictions[time == "Post"], 
                side = "r", 
                range_scale = .5,
                alpha = .6) +
  geom_half_point(data = posterior_predictions[time == "Pre"],
                  side = "l", 
                  range_scale = .5,
                  alpha = .6) +
  stat_slab(data = posterior_predictions[time == "Post"],
            alpha = .8, 
            scale = .4,
            side = "left") +  
  stat_slab(data = posterior_predictions[time == "Pre"],
            alpha = .8, 
            scale = .4, 
            side = "right") +
  #geom_text(data = landmark_two_bfs, aes(y = 25, x = 1.5, label = paste("BF[null]", "==", BF), fill = NA), color = "black", check_overlap = TRUE, size = 11, parse = TRUE) +
  geom_hline(yintercept = 0, linetype = "longdash", color = "black", alpha = .8) +
  facet_wrap(~target)+
  theme_tidybayes() +
  scale_x_discrete(limits = c("Pre", "Post"),
                   expand = c(0, 0),
                   labels = c("Pre", "Post"))+
  scale_y_continuous(limits = c(-25, 25), expand = c(0, 0), breaks = seq(-20, 20, 5)) +
  scale_fill_manual(breaks = c("Pre", "Post"),
    values = c("#001015", "#09A1D7"),
    labels = c("Pre", "Post")) +
  scale_color_manual(breaks = c("Pre", "Post"),
    values = c("#001015", "#09A1D7"),
    labels = c("Pre", "Post")) +
  labs(y = "Error (cm)", x = "Time", fill = "Time", color = "Time", title = "Body Landmark Task Posterior Predictive Distributions") +
  theme(axis.text.y = element_text(hjust = 0),
        title = element_text(size = 14),
        text = element_text(size = 14, color = "black"),
        strip.background = element_blank(),
        strip.placement = "inside",
        strip.switch.pad.wrap = unit(0, "in"),
        panel.background = element_rect(fill = "transparent", colour = NA), 
        legend.background = element_rect(fill = "transparent", colour = NA),  
        plot.background = element_rect(fill = "transparent", colour = NA))

landmark_lapsefix_posterior_predictive_plot <- posterior_predictions_lapsefix %>%
ggplot(aes(y = .prediction,
  x = time,
  fill = time,
  color = time)) + 
  stat_pointinterval(data = posterior_predictions_lapsefix[time == "Post"],
                     point_interval = mean_qi, 
                     show_slab = FALSE, 
                     position = position_nudge(x = -.45)) +
  stat_pointinterval(data = posterior_predictions_lapsefix[time == "Pre"],
                   point_interval = mean_qi, 
                   show_slab = FALSE, 
                   position = position_nudge(x = .45)) +
  geom_half_point(data = posterior_predictions_lapsefix[time == "Post"], 
                  side = "r", 
                  range_scale = .5,
                  alpha = .6) +
  geom_half_point(data = posterior_predictions_lapsefix[time == "Post"], 
                side = "r", 
                range_scale = .5,
                alpha = .6) +
  geom_half_point(data = posterior_predictions_lapsefix[time == "Pre"],
                  side = "l", 
                  range_scale = .5,
                  alpha = .6) +
  stat_slab(data = posterior_predictions_lapsefix[time == "Post"],
            alpha = .8, 
            scale = .4,
            side = "left") +  
  stat_slab(data = posterior_predictions_lapsefix[time == "Pre"],
            alpha = .8, 
            scale = .4, 
            side = "right") +
  #geom_text(data = landmark_two_bfs, aes(y = 25, x = 1.5, label = paste("BF[null]", "==", BF), fill = NA), color = "black", check_overlap = TRUE, size = 11, parse = TRUE) +
  geom_hline(yintercept = 0, linetype = "longdash", color = "black", alpha = .8) +
  facet_wrap(~target)+
  theme_tidybayes() +
  scale_x_discrete(limits = c("Pre", "Post"),
                   expand = c(0, 0),
                   labels = c("Pre", "Post"))+
  scale_y_continuous(limits = c(-25, 25), expand = c(0, 0), breaks = seq(-20, 20, 5)) +
  scale_fill_manual(breaks = c("Pre", "Post"),
    values = c("#001015", "#09A1D7"),
    labels = c("Pre", "Post")) +
  scale_color_manual(breaks = c("Pre", "Post"),
    values = c("#001015", "#09A1D7"),
    labels = c("Pre", "Post")) +
  labs(y = "Error (cm)", x = "Time", fill = "Time", color = "Time", title = "Body Landmark Task Posterior Predictive Distributions") +
  theme(axis.text.y = element_text(hjust = 0),
        title = element_text(size = 14),
        text = element_text(size = 14, color = "black"),
        strip.background = element_blank(),
        strip.placement = "inside",
        strip.switch.pad.wrap = unit(0, "in"),
        panel.background = element_rect(fill = "transparent", colour = NA), 
        legend.background = element_rect(fill = "transparent", colour = NA),  
        plot.background = element_rect(fill = "transparent", colour = NA))

landmark_posterior_predictive_plot
landmark_lapsefix_posterior_predictive_plot

saveRDS(landmark_posterior_predictive_plot, here::here("scripts", "for_osf", "tooluse_in_real", "figures", "landmark-posterior-prediction-plot.rds"))
```
## Model Summary

```{r}
model_params <- readRDS(here::here("scripts", "for_osf", "tooluse_in_real", "tables", "landmark_model_params.rds"))

# Move the posterior draws long-to-wide using dcast
draws_change <- posterior_expected_value %>%
  dcast(
    .draw ~ target + time,
    value.var = ".epred"
  )  %>%
  mutate(
    # Calculate pre-to-post change as post - pre
    "Wrist Change" = `Wrist_Post` - `Wrist_Pre`,
    "Forearm Change" = `Forearm_Post` - `Forearm_Pre`,
    "Elbow Change" = `Elbow_Post` - `Elbow_Pre`
  ) %>%
  # Select only the change columns
  select(
    .draw,
    ends_with("Change")
  ) %>%
  # Melt the data back to long format
  melt(
    id.vars = c(".draw"),
    variable.name = "Target",
    value.name = ".epred"
  ) %>%
  # Remove the " Change" from the end of the outcome names
  mutate("Target" = str_remove(Target, " Change$")) %>%
  # Calculate the mode and HDI for each outcome
  group_by(Target) %>% 
  mode_hdi() %>%
  # Select the mode and interval thresholds and rename the columns
  select(Target:.upper) %>%
  rename(
    "Mode" = .epred,
    "Lower" = .lower,
    "Upper" = .upper
  )

# Merge the BF and mode/HDI data
model_params_unstd <- model_params %>%
  mutate(Target = Parameter) %>% 
  select(
    Target,
    BF
  ) %>%
  as.data.table() %>%
  merge.data.table(
    draws_change,
    by = "Target"
  ) %>%
  mutate(
    # If BF > 1, round to 2 decimal places
    # If BF < 1, turn into a LaTeX fraction and, 
    # depending on how small, round to 1 or 0 decimal places.
    BF = fcase(
      BF > 1, paste0(
        round(BF, 2)
      ),
      
      BF < .5, paste0(
      "\\frac{1}{",
      fifelse(
        1/BF > 100,
        round(1/BF, 0),
        round(1/BF, 1)
        ),
      "}"
      ),

      BF < 1 & BF >= .5, paste0(
        round(BF, 2)
      )
    ),
    # Turn Target into a factor and reorder the levels
    Target = factor(Target,
    levels = c(
      "Wrist",
      "Forearm",
      "Elbow"
      )
    )
  ) %>%
  # Arrange the data table to match the new order of the levels
  arrange(Target)
  
# Create an APA-style table using flextable
model_table <- model_params_unstd %>%
  flextable::qflextable() %>%
  # Adds a row and line to the top of the table to indicate the
  # HDI interval estimates
  add_header_row(T, 
                 c(" ", "95% Highest Density Interval"), 
                 colwidths = c(3, 2)) %>% 
  add_header_lines("") %>%
  border_outer(border = officer::fp_border(style = "none", 
                                           width = 0), 
               part = "header") %>%
  # Add lines that cohere to APA style
  hline(i = 1, 
        border = officer::fp_border(
          style = "solid", 
          width = 1.5), 
        part = "header") %>%
  hline(i = 2, j= c(1:3), 
        border = officer::fp_border(
          style = "none", 
          width = 0), 
        part = "header") %>%
  hline(i = 2, j= c(4, 5), 
        border = officer::fp_border(
          style = "solid", 
          width = 1), 
        part = "header") %>%
  hline(i = 3, 
        border = officer::fp_border(style = "solid", 
                                    width = 1), 
        part = "header") %>%
  hline(i = 3, 
        border = officer::fp_border(style = "solid", 
                                    width = 1.5), 
        part = "body") %>%
  style(i = 1:3,j = 2, part = "body", pr_t = fp_text(font.size = 9)) %>%
  align(j = 2:5, align = "center", part = "all") %>%
  # Make sure the table is the right size
  autofit(
  add_w = .1,
  add_h = 0.1
  ) %>%
  # Add a descriptive footnote
  flextable::footnote(i = 3, j=c(1:2),
           value = as_paragraph(
             c(
               "Parameter estimates (Mode, 95% HDI) based on 50,000 draws from the posterior distribution, unstandardized and calculated as (Post - Pre). Values correspond to cm.", 
               "Reported Bayes Factors represent multiplicative evidence in favor of an effect in the direction of precedent (for tool-use) over a complementary (one-sided) null hypothesis. Fractional values indicate that evidence favors the null."
               )
             ), 
           ref_symbols = c("a", "b"),
           part = "header"
          ) %>%
  # Turn the Bayes Factors into LaTeX equations so the fractional values will display correctly
  compose(
    j = "BF",
    value = as_paragraph(as_equation(BF)),
  ) %>%
  font(fontname = "Times New Roman",
       part = "all") %>%
  flextable::fontsize(size = 9, part = "footer") %>%
  flextable::colformat_double(i=c(1:3), j = 3:5, digits = 2)

# Display the table
model_table

# Save the table to an RDS to be used in the manuscript
saveRDS(model_table, here::here("scripts", "for_osf", "tooluse_in_real", "tables", "landmark_table.rds"))
```

```{r}
lapsefix_model_params <- readRDS(here::here("scripts", "for_osf", "tooluse_in_real", "tables", "landmark_lapsefix_model_params.rds"))

# Move the posterior draws long-to-wide using dcast
draws_change <- posterior_expected_value_lapsefix %>%
  dcast(
    .draw ~ target + time,
    value.var = ".epred"
  )  %>%
  mutate(
    # Calculate pre-to-post change as post - pre
    "Wrist Change" = `Wrist_Post` - `Wrist_Pre`,
    "Forearm Change" = `Forearm_Post` - `Forearm_Pre`,
    "Elbow Change" = `Elbow_Post` - `Elbow_Pre`
  ) %>%
  # Select only the change columns
  select(
    .draw,
    ends_with("Change")
  ) %>%
  # Melt the data back to long format
  melt(
    id.vars = c(".draw"),
    variable.name = "Target",
    value.name = ".epred"
  ) %>%
  # Remove the " Change" from the end of the outcome names
  mutate("Target" = str_remove(Target, " Change$")) %>%
  # Calculate the mode and HDI for each outcome
  group_by(Target) %>% 
  mode_hdi() %>%
  # Select the mode and interval thresholds and rename the columns
  select(Target:.upper) %>%
  rename(
    "Mode" = .epred,
    "Lower" = .lower,
    "Upper" = .upper
  )

# Merge the BF and mode/HDI data
lapsefix_model_params_unstd <- lapsefix_model_params %>%
  mutate(Target = Parameter) %>% 
  select(
    Target,
    BF
  ) %>%
  as.data.table() %>%
  merge.data.table(
    draws_change,
    by = "Target"
  ) %>%
  mutate(
    # If BF > 1, round to 2 decimal places
    # If BF < 1, turn into a LaTeX fraction and, 
    # depending on how small, round to 1 or 0 decimal places.
    BF = fcase(
      BF > 1, paste0(
        round(BF, 2)
      ),
      
      BF < .5, paste0(
      "\\frac{1}{",
      fifelse(
        1/BF > 100,
        round(1/BF, 0),
        round(1/BF, 1)
        ),
      "}"
      ),

      BF < 1 & BF >= .5, paste0(
        round(BF, 2)
      )
    ),
    # Turn Target into a factor and reorder the levels
    Target = factor(Target,
    levels = c(
      "Wrist",
      "Forearm",
      "Elbow"
      )
    )
  ) %>%
  # Arrange the data table to match the new order of the levels
  arrange(Target)
  
# Create an APA-style table using flextable
lapsefix_model_table <- lapsefix_model_params_unstd %>%
  flextable::qflextable() %>%
  # Adds a row and line to the top of the table to indicate the
  # HDI interval estimates
  add_header_row(T, 
                 c(" ", "95% Highest Density Interval"), 
                 colwidths = c(3, 2)) %>% 
  add_header_lines("") %>%
  border_outer(border = officer::fp_border(style = "none", 
                                           width = 0), 
               part = "header") %>%
  # Add lines that cohere to APA style
  hline(i = 1, 
        border = officer::fp_border(
          style = "solid", 
          width = 1.5), 
        part = "header") %>%
  hline(i = 2, j= c(1:3), 
        border = officer::fp_border(
          style = "none", 
          width = 0), 
        part = "header") %>%
  hline(i = 2, j= c(4, 5), 
        border = officer::fp_border(
          style = "solid", 
          width = 1), 
        part = "header") %>%
  hline(i = 3, 
        border = officer::fp_border(style = "solid", 
                                    width = 1), 
        part = "header") %>%
  hline(i = 3, 
        border = officer::fp_border(style = "solid", 
                                    width = 1.5), 
        part = "body") %>%
  style(i = 1:3,j = 2, part = "body", pr_t = fp_text(font.size = 9)) %>%
  align(j = 2:5, align = "center", part = "all") %>%
  # Make sure the table is the right size
  autofit(
  add_w = .1,
  add_h = 0.1
  ) %>%
  # Add a descriptive footnote
  flextable::footnote(i = 3, j=c(1:2),
           value = as_paragraph(
             c(
               "Parameter estimates (Mode, 95% HDI) based on 50,000 draws from the posterior distribution, unstandardized and calculated as (Post - Pre). Values correspond to error in cm, with negative values indicating an underestimate of the landmark on the z (forward) axis.", 
               "Reported Bayes Factors represent multiplicative evidence in favor of an effect in the direction of precedent (for tool-use) over a complementary (one-sided) null hypothesis. Fractional values indicate that evidence favors the null."
               )
             ), 
           ref_symbols = c("a", "b"),
           part = "header"
          ) %>%
  # Turn the Bayes Factors into LaTeX equations so the fractional values will display correctly
  compose(
    j = "BF",
    value = as_paragraph(as_equation(BF)),
  ) %>%
  font(fontname = "Times New Roman",
       part = "all") %>%
  flextable::fontsize(size = 9, part = "footer") %>%
  flextable::colformat_double(i=c(1:3), j = 3:5, digits = 2)

# Display the table
lapsefix_model_table

# Save the table to an RDS to be used in the manuscript
saveRDS(lapsefix_model_table, here::here("scripts", "for_osf", "tooluse_in_real", "tables", "lapsefix_landmark_table.rds"))
```

## Prior Sensitivity


```{r}
model <- readRDS(here::here("scripts", "for_osf", "tooluse_in_real", "models", "landmark_error_time_target.rds"))
model_lapsefix <- readRDS(here::here("scripts", "for_osf", "tooluse_in_real", "models", "landmark_lapsefix_error_time_target.rds"))
priorsense::powerscale_sensitivity(
  model, 
  variable = c(
    "b_b_targetWrist",
    "b_b_targetForearm",
    "b_b_targetElbow"
    )
)
priorsense::powerscale_sensitivity(
  model_lapsefix,
  variable = c(
    "b_b_targetWrist",
    "b_b_targetForearm",
    "b_b_targetElbow"
    )
)
```
